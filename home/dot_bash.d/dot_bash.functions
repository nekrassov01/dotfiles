#!/usr/bin/env bash

#
# Functions for fzf
#

if has fzf; then

  # fzf search for ghq root
  fz_ghq() {
    chk fzf ghq
    local target
    target=$(ghq list | fzf --phony --preview-window=60% --preview "ls -al $(ghq root)/{} | tail -n+4")

    if [[ -n "$target" ]]; then
      if has code; then
        code "$(ghq root)/$target" || return 1
      else
        cd "$(ghq root)/$target" || return 1
      fi
    fi
  }

  # fzf search for ssh hosts
  fz_ssh() {
    # required: fzf
    chk fzf

    local target

    # Must include sub configs one level below
    # shellcheck disable=SC2046,SC2002
    target=$(
      cat $(
        find "$HOME/.ssh" -maxdepth 2 -type f,l -regex '.*config$' | sort
      ) |
        grep -i ^Host |
        grep -v '\*' |
        uniq |
        awk '{print $2}' |
        fzf
    )

    if [[ -n "$target" ]]; then
      ssh "$target"
    fi
  }

  # fzf search for aws cli reference
  fz_awscli() {
    # required: fzf aws
    chk fzf aws

    local target url url_prefix="https://docs.aws.amazon.com/cli/latest/reference"

    if [[ -z "$1" ]]; then
      target=$(
        aws help |
          col -b |
          sed -n '/AVAILABLE SERVICES/,/SEE ALSO/p' |
          grep 'o ' |
          sed s/'o '//g |
          tr -d ' ' |
          sed -e /help/d |
          sort |
          fzf --preview-window=80% --preview "echo $url_prefix/{}/index.html"
      )
      url="$url_prefix/${target}/index.html"
    else
      target=$(aws "$1" help |
        col -b |
        sed -n '/AVAILABLE COMMANDS/,/()/p' |
        grep 'o ' |
        sed 's/o\ //g' |
        tr -d ' ' |
        sed -e /help/d |
        sort |
        fzf --preview-window=60% --preview "echo $url_prefix/${1}/{}.html")
      url="$url_prefix/${1}/${target}.html"
    fi

    if [[ -n $target ]]; then
      open "$url"
    fi
  }

  # fzf search for aws powershell reference
  fz_awspwsh() {
    # required: fzf pwsh
    chk fzf pwsh

    local target url_prefix="https://docs.aws.amazon.com/powershell/latest/reference/items"
    target=$(pwsh -c "(Get-AWSCmdletName).CmdletName" | fzf --preview "echo $url_prefix/{}.html")

    if [[ -n $target ]]; then
      open "$url_prefix/${target}.html"
    fi
  }
fi

#
# Functions for utility
#

# mkdir -p <dir> && cd <dir>
mkcd() {
  if [[ -z "$1" ]]; then
    print_err "Need to specify the directory name."
    return 1
  fi

  if mkdir -p "$1"; then
    cd "$_" || return 1
  fi
}

# cd $(readlink <dir>)
lncd() {
  if [[ -z "$1" ]]; then
    target_dir=$(pwd) || target_dir=${1%/}
  fi

  cd "$(readlink "$target_dir")" || return 1
}

# Open directory
o() {
  if [[ "$#" == 0 ]]; then
    open .
  else
    open "$@"
  fi
}

# Display active interface only
ifactive() {
  for i in $(ifconfig -lu); do
    if ifconfig "$i" | grep -q 'status: active'; then
      echo "$i"
    fi
  done
}

# Extracts archived files / mounts disk images
# reference: this based on https://github.com/holman/dotfiles/blob/master/functions/extract
extract() {
  if [[ -z "$1" ]]; then
    print_err "Need to specify a file."
    return 1
  fi

  if [[ ! -f "$1" ]]; then
    print_err "'$1' is not a valid file."
    return 1
  fi

  case "$1" in
  *.tar.bz2)
    tar -jxvf "$1"
    ;;
  *.tar.gz)
    tar -zxvf "$1"
    ;;
  *.bz2)
    bunzip2 "$1"
    ;;
  *.dmg)
    hdiutil mount "$1"
    ;;
  *.gz)
    gunzip "$1"
    ;;
  *.tar)
    tar -xvf "$1"
    ;;
  *.tbz2)
    tar -jxvf "$1"
    ;;
  *.tgz)
    tar -zxvf "$1"
    ;;
  *.zip)
    unzip "$1"
    ;;
  *.ZIP)
    unzip "$1"
    ;;
  *.pax)
    pax <"$1" -r
    ;;
  *.pax.Z)
    uncompress "$1" --stdout | pax -r
    ;;
  *.rar)
    unrar x "$1"
    ;;
  *.Z)
    uncompress "$1"
    ;;
  *)
    print_err "'$1' cannot be extracted/mounted via extract()."
    ;;
  esac
}
